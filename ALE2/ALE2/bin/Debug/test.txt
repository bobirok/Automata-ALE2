//NOT DFA
alphabet: abc
states: S,B,C
final: C
transitions:
S,a --> S
S,b --> B
C,a --> C
B,b --> C
end;

// NOT DFA
alphabet: abc
states: S,B,C
final: C
transitions:
S,a --> S
S,b --> B
C,a --> C
C,b --> S
B,b --> C
B,a --> B
end;

// DFA
alphabet: ab
states: S,B,C
final: C
transitions:
S,a --> S
S,b --> B
C,a --> C
C,b --> S
B,b --> C
B,a --> B
end;

alphabet: ab
states: q0
final: q0
transitions:
q0,a --> q0
q0,b --> q0
end.
dfa: y
finite: n
words:
_,n
a,y
aaaaa,y
b,y
bbb,y
babaaabb,y
bbbaabababab,y
end.

alphabet: ab
states: S,B,C
final: C
transitions:
S,a --> S
S,b --> B
S,b --> S
C,a --> C
C,b --> S
B,b --> C
B,a --> B
end;

words:
bb, y
bab, y
bbb, y
end.


alphabet: ab
states: S,B,C
final: B
transitions:
S,a --> B
B,b --> C
C,a --> C
end;

words:
bb, y
bab, y
bbb, y
end.

alphabet: abc
states: S,B
final: B
transitions:
S,a --> B
S,b --> B
B,a --> S
end;

// TEACHERS'S CASE

alphabet: ab
states: S,B,C
final: C
transitions:
S,a --> B
B,a --> C
C,a --> C
end;

// Test - it does not work
alphabet: ab
states: S,B,C
final: C
transitions:
S,a --> B
B,a --> C
C,a --> C
end;

//FINITE CASES
alphabet: ab
states: S,B,C,D
final: C,D
transitions:
S,a --> B
B,a --> C
C,_ --> C
C,a --> D
end;

// Test - it does not work
alphabet: ab
states: S,B,C
final: C
transitions:
S,a --> B
S,b --> B
B,a --> C
B,b --> C
end.

dfa: n
finite: y

alphabet: 01
states: A,B,C
final: C
transitions:
A,1 --> A
A,0 --> C
A,_ --> B
A,0 --> B
B,1 --> B
B,_ --> C
C,0 --> C
C,1 --> C
end.



alphabet: ab
states: N0,N1,N2,N3,N4
final: N0
transitions:
N0,_ --> N2
N0,_ --> N1
N3,_ --> N1
N3,_ --> N2
N1,_ --> N0
N1,_ --> N2
N1,_ --> N3
N2,_ --> N3
N2,_ --> N0
N2,_ --> N1
N3,_ --> N2
N3,_ --> N0
N3,_ --> N1
N2,a --> N4
N2,b --> N4
end.

finite: n
dfa: n
words:
,y
end.

// FROM GEEKS FOR GEEKS

alphabet: ab
states: A,B,C
final: C
transitions:
A,b --> A
A,a --> C
A,_ --> B
A,a --> B
B,b --> B
B,_ --> C
C,a --> C
C,b --> C
end.

alphabet: ab
states: S1,S2,S3,S4,S5
final: S3
transitions:
S1,a --> S2
S2,b --> S3
S2,_ --> S4
S4,_ --> S5
S5,_ --> S2
end.


alphabet: ab
states: N0,N1,N2,N3,N4,N5,N6,N7,N8
final: N1,N4,N7
transitions:
N0,_ --> N1
N1,_ --> N2
N2,_ --> N0
N2,_ --> N3
N3,a --> N4
N4,_ --> N5
N5,b --> N6
N6,_ --> N7
N7,_ --> N8
N8,_ --> N6
end.
finite:y
#words:
#,y
#a,y
#ab,y
#b,n
#abb,n
#aabb,n
#end.

alphabet: ab
states: N0,N1,N2,N3
final: N1,N2,N3
transitions:
N0,_ --> N1
N1,_ --> N2
N2,_ --> N1
N2,a --> N3
end.
finite:y

alphabet: ab
states: N0,N1,N2,N3,N5
final: N1,N2
transitions:
N0,_ --> N1
N1,_ --> N2
N2,a --> N1
N5,b --> N1
N3,_ --> N5
N3,_ --> N2
N2,_ --> N3
end.
finite:n

// FINITE WITH DOUBLE EPSILON LOOPS

alphabet: ab
states: N0,N1,N2,N3,N4,N6,N7,N8
final: N1,N4,N7
transitions:
N0,_ --> N1
N1,_ --> N6
N6,_ --> N7
N7,_ --> N8
N8,_ --> N6
N8,_ --> N2
N2,_ --> N0
N2,_ --> N3
N3,a --> N4
end.
dfa: n
finite:y
#words:
#,y
#a,y
#ab,y
#b,n
#abb,n
#aabb,n
#end.

// Convert to finite
alphabet: ab
states: S1,S2,S3,S4,S5
final: S2,S5
transitions:
S1,_ --> S2
S1,a --> S2
S2,b --> S3
S2,a --> S3
S3,a --> S2
S3,_ --> S1
S3, b --> S4
S4,_ --> S2
S4,b -->S5
end.

// PDA
# Regular Expression: *(|(a,b))
alphabet: ab
stack: x
states: N0,N1,N2
final: N2
transitions:
N0,_[_,x] --> N0
N0,a[x,_] --> N1
N1,b[x,_] --> N2
end.

dfa: y
finite: y
words:
ab,y
end.

// PDA

# Regular Expression: *(|(a,b))
alphabet: ab
states: N0,N1,N2
stack: x
final: N2
transitions:
N0,_[_,x] --> N1
N1,_[x,_] --> N0
N1,a --> N2
end.

finite: n
dfa: n
words:
aa,y
end;


alphabet: ab
stack:x
states: N0,N1,N2
final: N2
transitions:
N0,a[_,x] --> N0
N0,a[x,_] --> N1
N1,b[x,_] --> N2
end.

dfa: y
finite: y
words:
aaab,y
end.